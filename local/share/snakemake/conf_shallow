import os
def find_prj_root(path=os.getcwd()):
    if os.path.isfile(os.path.join(path,'.PRJ_ROOT')):
        return path
    else:
        if path:
            return find_prj_root(os.path.dirname(path))
        else:
            raise Exception('Can not find the PRJ_ROOT directory')

PRJ_ROOT=find_prj_root()
BIOINFO_ROOT = os.getenv('BIOINFO_ROOT')
SNAKE_ROOT=os.getenv('SNAKE_ROOT')

BIN_DIR=PRJ_ROOT+'/local/bin'
SRC_DIR=PRJ_ROOT+'/local/src'

#egrassi@godot:/mnt/trcanmed/snaketree/prj/snakegatk/dataset/biobanca_shallowseq_pdo$ grep "-" all_aligned_dedup.tsv > passed_qc.tsv_test 
#xeno is empty
QC=SNAKE_ROOT+'/prj/snakegatk_real/dataset/strata_shallow/passed_qc.tsv'
BAM=SNAKE_ROOT+'/prj/snakegatk_real/dataset/strata_shallow/align/markedDup_'

def define_bam(qc, prefix):
    import os
    def read(file):
        res = []
        with open(file) as qc:
            for line in qc.readlines():
                fields = line.split('\t')
                res.append(fields[0])
        return(res)
    f = read(qc)
    def checkife(samples,prefix):
        res = []
        for s in samples:
            w = prefix+s+".sorted.bam"
            if os.path.exists(w):
                res.append(w)
        return(res)
    res = checkife(f, prefix)
    return(res)

rule bamfiles:
    params: bams=define_bam(QC, BAM)
    output: bam="new_bamfiles_path.tsv"
    run:
        with open(output.bam, 'w') as o:
            for b in params.bams:
                print(b, file=o)

# for qdnaseq
BIN_SIZE=15
CORES=8

## put together whole 84 PDX with chemo data for the call (27+biobanca) mail DNA da recuperare per shallow sequencing, typo with 59 and not 54
#egrassi@ulisse:/mnt/trcanmed/snaketree/prj/strata/dataset/shallow$ wc -l all_bamfiles_path.tsv
#84 all_bamfiles_path.tsv
BIOBANCA='/mnt/trcanmed/snaketree/prj/biobanca/dataset/V1/shallowseq/xeno_bamfiles_path.tsv'
WANTED="../figures/mutHRandWES_resp_cases.tsv"
rule all_bam:
    input: bio=BIOBANCA, wanted=WANTED, new="new_bamfiles_path.tsv"
    output: "all_bamfiles_path.tsv"
    shell: 
        """
            grep -f <(cut -f 1 {input.wanted}) < {input.bio} > {output}
            cat {input.new} >> {output}
        """

#GENCODE="/mnt/bioionfotree/task/gencode/dataset/hsapiens/27/primary_assembly.annotation.gtf.gz" 
GENCODE="/mnt/trcanmed/temp/primary_assembly.annotation.gtf.gz" 