include: "conf.sk"

rule muts_table:
    input: MUTS_REDUCED
    output: "muts_all_pivot.txt"
    run:
         import pandas
         data = pandas.read_csv(input[0], sep="\t", header=None, names=['pdx','mut'])
         pt = pandas.pivot_table(data, index=['pdx'], columns='mut', aggfunc=lambda x: 1, fill_value=0)
         pt.to_csv(output[0], sep='\t', index=True)

rule muts_gene_table:
    input: MUTS_GENE_REDUCED
    output: "muts_gene_pivot.txt"
    run:
         import pandas
         data = pandas.read_csv(input[0], sep="\t", header=None, names=['pdx','mut'])
         pt = pandas.pivot_table(data, index=['pdx'], columns='mut', aggfunc=lambda x: 1, fill_value=0)
         pt.to_csv(output[0], sep='\t', index=True)

rule sanger_all:
    input: SANGER
    output: "sanger_all.txt"
    shell:
        """
            grep LMX {input} |  perl -ane 'my $c=substr($F[0],0,7); print "$c\\t$F[7]\\n"' > {output}
        """

rule sanger_driver:
    input: SANGER
    output: "sanger_driver.txt"
    shell:
        """
            grep LMX {input} |  perl -ane 'if ($F[17] =~ /TRUE/i) {{my $c=substr($F[0],0,7); print "$c\\t$F[7]\\n"}}' > {output}
        """

rule muts_sanger_table:
    input: "sanger_all.txt"
    output: "muts_sanger_pivot.txt"
    run:
         import pandas
         data = pandas.read_csv(input[0], sep="\t", header=None, names=['pdx','mut'])
         pt = pandas.pivot_table(data, index=['pdx'], columns='mut', aggfunc=lambda x: 1, fill_value=0)
         pt.to_csv(output[0], sep='\t', index=True)

rule muts_sangerdriver_table:
    input: "sanger_driver.txt"
    output: "muts_sangerdriver_pivot.txt"
    run:
         import pandas
         data = pandas.read_csv(input[0], sep="\t", header=None, names=['pdx','mut'])
         pt = pandas.pivot_table(data, index=['pdx'], columns='mut', aggfunc=lambda x: 1, fill_value=0)
         pt.to_csv(output[0], sep='\t', index=True)

rule cnv:
    input: CNV_GENES
    output: "cnv_genes_{thr}"
    shell:
        """
        sed 1d {input} | bawk '$3 != "NA" && $3 >= {wildcards.thr} {{print $1,$2"_gain"}} $3 == "NA" {{print $1,$2"_loss"}}' > {output}
        """

wildcard_constraints:
    thr="[0-9]"

rule muts_cnv_table:
    input: "cnv_genes_{thr}"
    output: "muts_cnv{thr}_pivot.txt"
    run:
         import pandas
         data = pandas.read_csv(input[0], sep="\t", header=None, names=['pdx','mut'])
         pt = pandas.pivot_table(data, index=['pdx'], columns='mut', aggfunc=lambda x: 1, fill_value=0)
         pt.to_csv(output[0], sep='\t', index=True)

rule avg_week:
    input: volumes=VOLUMES
    output: waterfall="{wr}-{wt}_waterfall.png", means="{wr}-{wt}_avg.tsv"
    params: debug=DEBUG, pdx="pdx", ref="{wr}", target="{wt}"  
    script: SRC_DIR+"average_volumes_pdx.R"

rule models:
    input: volumes="{weeks}_avg.tsv", pivot="muts_{type}_pivot.txt"
    output: linear="{weeks}.{type}_linear_models.tsv", logistic="{weeks}.{type}_logistic_models.tsv"
    params: debug=DEBUG, pdx="pdx", cutoff=3 
    script: SRC_DIR+"models_vol_pivot.R"


#### WES vs Sanger comparisons #####
# WES is hg18, Sanger hg19
# TODO translate to python
#(base) [exomes_pre]egrassi@hactarlogin$ liftOver sanger_vs_wes.wes ../../local/share//data/pre_irino/hg18ToHg19.over.chain.gz sanger_vs_wes.wes.hg19 sanger_vs_wes.wes.miss

rule align_muts:
    input: sanger=SANGER, WES=MMUTS
    output: sanger="sanger_vs_wes.sanger",wes="sanger_vs_wes.wes"
    shell:
        """
          grep LMX {input.sanger} | perl -wane '$ch="chr".$F[3]; $b=$F[4]; $e=$b+1;
          $f = $F[5]; $s = $F[6];
          @ff = split("",$f); @ss = split("",$s);
          if ($ff[0] eq $ss[0]) {{
            $f = substr($f, 1);
            $s = substr($s, 1);
            $b +=1;
            $e +=1;
          }}
          $n=substr($F[0],0,7)."-".$f."_".$s."@".$F[7];
          print "$ch\\t$b\\t$e\\t$n\\n"' > {output.sanger}
          cut -f 2,4,7 {input.WES} | sed 1d  | tr ":" "_" | perl -wane '@c=split("_", $F[2],-1); @co = split("-", $c[1]); $chr=$c[0]; $b=$co[0]; $e=$b+1;
          $n = $F[0]."-".$c[2]."_".$c[3]."@".$F[1];   
          print "$chr\\t$b\\t$e\\t$n\\n"' > {output.wes}
        """
