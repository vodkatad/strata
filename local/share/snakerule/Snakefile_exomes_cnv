BAMDIR="../"
#ls *t*.bam | sed 's/\.bam//g'  | sed 's/_t_/\t/g' | cut -f 2| tr "\n" "," | sed 's/,/","/g;'
SAMPLES="PGDX715T_CpCR2","PGDX717T_CpCR2","PGDX1453T_CpCR2","PGDX1456T_CpCR2","PGDX1458T_CpCR2","PGDX1467T_CpCR2","PGDX1470T_CpCR2","PGDX2904T_CpCR2","PGDX2908T_CpCR2","PGDX2910T_CpCR2","PGDX2911T_CpCR2","PGDX2912T_CpCR2","PGDX2913T_CpCR2","PGDX2914T_CpCR2","PGDX2915T_CpCR2","PGDX2916T_CpCR2","PGDX2917T_CpCR2","PGDX2918T_CpCR2","PGDX2919T_CpCR2","PGDX2920T_CpCR2","PGDX2921T_CpCR2","PGDX2922T_CpCR2","PGDX2923T_CpCR2","PGDX2924T_CpCR2","PGDX2925T_CpCR2","PGDX3228T_CpCR2","PGDX3229T_CpCR2","PGDX3230T_CpCR2","PGDX3231T_CpCR2","PGDX3232T_CpCR2","PGDX3233T_CpCR2","PGDX3234T_CpCR2","PGDX3235T_CpCR2","PGDX3236T_CpCR2","PGDX3237T_CpCR2","PGDX3238T_CpCR2","PGDX3239T_CpCR2","PGDX3240T_CpCR2","PGDX3241T_CpCR2","PGDX3242T_CpCR2","PGDX3243T_CpCR2","PGDX3244T_CpCR2","PGDX3245T_CpCR2","PGDX3246T_CpCR2","PGDX3247T_CpCR2","PGDX3249T_CpCR2","PGDX3250T_CpCR2","PGDX3251T_CpCR2","PGDX3252T_CpCR2","PGDX3253T_CpCR2","PGDX3254T_CpCR2","PGDX3255T_CpCR2","PGDX3256T_CpCR2","PGDX3257T_CpCR2","PGDX3258T_CpCR2","PGDX3259T_CpCR2","PGDX3260T_CpCR2","PGDX3261T_CpCR2","PGDX3262T_CpCR2","PGDX3263T_CpCR2","PGDX3264T_CpCR2","PGDX3265T_CpCR2","PGDX3266T_CpCR2","PGDX3267T_CpCR2","PGDX3268T_CpCR2","PGDX3269T_CpCR2","PGDX3804T_CpCR2","PGDX3805T_CpCR2","PGDX3806T_CpCR2","PGDX3807T_CpCR2","PGDX4165T_CpCR2","PGDX4166T_CpCR2","PGDX4162C_CpCR2","PGDX1466T_1_Cp","PGDX1466T_2_Cp","PGDX1466T_Cp","PGDX688T_1_Cp","PGDX688T_Cp"

def find_paired_samples(wildcard):
	import glob
	res = { 'tumor': 'mock', 'normal': 'mock' }
	n_bams = glob.glob(BAMDIR+"*_n_"+wildcard.sample+".bam")
	t_bams = glob.glob(BAMDIR+"*_t_"+wildcard.sample+".bam")
	if len(n_bams) == 1 and len(t_bams)==1:
		#name_n = n_bams[0].replace('.bam','')
		#pieces_n = name.split('_')
		#res.append('_'+pieces[1]+'-'+pieces[3]+'_'+pieces[4]+'.cnv')
		#_EGAR00001352805_n_PGDX715T_CpCR2.bam
		res = { 'tumor': t_bams[0], 'normal': n_bams[0] }
	return res

#input: expand("{sampleid1}-{sampleid2}.cnv", zip, sampleid1=SAMPLES1, sampleid2=SAMPLES2)
rule all_cnv:
	input: expand("{sample}.cnv", sample=SAMPLES)

#REF=
#EXONS=
#CENTROMERES=
# use a run depending on the if? separate rules called somehow depending on find_paired_samples?
#write a file with this rule and then call a rule parsing it
rule call_cvn:
	input: unpack(find_paired_samples)
	output: "{sample}.cnv"
	shell: 
		"""
		if [ {input.tumor} = "mock" ]; then
			echo -e "{wildcards.sample}\tmissingpair" > {output}
		else
			echo -e "{input.tumor}\t{input.normal}" > {output}

		fi
		"""


rule mock:
	output: "mock"
	shell: "echo hello > {output}"
